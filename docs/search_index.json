[
["index.html", "Practical R: a concise manual Preface", " Practical R: a concise manual Lingyun Zhang 2021-04-25 Preface To be written. "],
["ti.html", "1 Tidyverse way 1.1 tibble 1.2 Creating a tibble 1.3 Selecting columns 1.4 Creating new column 1.5 Keeping some rows 1.6 Arrange rows 1.7 Changing variables’ names 1.8 Re-arranging variables’ positions", " 1 Tidyverse way In this chapter (Chapter 1) and the next one, we deal with data frames, and we cover how to create a data frame; how to select from the data frame the columns that we want; how to create a new column based on existed columns in the data frame; how to keep the rows that meet our set conditions; how to arrange the data frame based on some variables; how to change variables’ names; how to re-arrange positions of variables in the data frame; how to have summary of the data frame; how to convert a long table to a wide table; how to convert a wide table to a long table; The difference between Chapter 1 and Chapter 2 is that for the same task we use different tools (to be exact functions)—in this chapter we use functions that come from tidyverse package, whereas in the next chapter we use functions that mainly belong to data.table package. The first line of R codes in this chapter should be library(tidyverse) 1.1 tibble What is a tibble? The short answer is: A tibble is a data frame—probably this is enough, but we may also want to know that—it’s an enhanced data frame in a sense that it forces some rules (e.g. type rule) to be more strictly obeyed (the effects are: on one hand side, we lose some freedom associated with a data frame, on the other hand side, it prevents us from making some subtle mistakes while dealing with a data frame.) Tidyverse community encourages people to use tibbles. A tibble may not be working with some (old) packages, in that case, just use as.data.frame() to do converting. We can convert a data frame to a tibble by using tibble::as_tibble(). 1.2 Creating a tibble We can use data.frame() to create a data frame; one important thing is that we should almost always set stringsAsFactors = FALSE. To create a tibble, we use tibble::tibble() Example 1: a_df &lt;- data.frame(x = c(1L:3L, NA, NA), y = rnorm(5), z = c(NA, &#39;a&#39;, NA, &#39;b&#39;, &#39;c&#39;), stringsAsFactors = FALSE) (a_df) ## x y z ## 1 1 1.3381123 &lt;NA&gt; ## 2 2 -2.5159169 a ## 3 3 1.2380736 &lt;NA&gt; ## 4 NA -1.1468342 b ## 5 NA 0.2642254 c Example 2: library(tidyverse) a_tibble &lt;- tibble(x = c(1L:3L, NA, NA), y = rnorm(5), z = c(NA, &#39;a&#39;, NA, &#39;b&#39;, &#39;c&#39;)) (a_tibble) ## # A tibble: 5 x 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 -0.184 &lt;NA&gt; ## 2 2 0.283 a ## 3 3 -0.135 &lt;NA&gt; ## 4 NA 0.723 b ## 5 NA 0.653 c Example 3: tibble is more “strict” We can run the following code if we want but it silently changes the type of variable x from integer to character. a_df[is.na(a_df)] &lt;- &quot;&quot; If we run the following code we get an error message a_tibble[is.na(a_tibble)] &lt;- &quot;&quot; Error message 1.3 Selecting columns We can use functions select() and select_at(). Example 1: b_df &lt;- select(a_df, x, y) (b_df) ## x y ## 1 1 1.3381123 ## 2 2 -2.5159169 ## 3 3 1.2380736 ## 4 NA -1.1468342 ## 5 NA 0.2642254 (c(is.tibble(a_df), is.tibble(b_df), is.data.frame(b_df))) ## [1] FALSE FALSE TRUE c_df &lt;- select_at(a_df, .var = c(&quot;z&quot;, &quot;y&quot;)) (c_df) ## z y ## 1 &lt;NA&gt; 1.3381123 ## 2 a -2.5159169 ## 3 &lt;NA&gt; 1.2380736 ## 4 b -1.1468342 ## 5 c 0.2642254 Example 2: Selecting plus renaming d_df &lt;- select(a_df, new_x = x, new_y = y) (d_df) ## new_x new_y ## 1 1 1.3381123 ## 2 2 -2.5159169 ## 3 3 1.2380736 ## 4 NA -1.1468342 ## 5 NA 0.2642254 1.4 Creating new column We use function mutate() Example 1: e_df &lt;- mutate(a_df, u = y^2, v = is.na(z)) (e_df) ## x y z u v ## 1 1 1.3381123 &lt;NA&gt; 1.79054442 TRUE ## 2 2 -2.5159169 a 6.32983810 FALSE ## 3 3 1.2380736 &lt;NA&gt; 1.53282614 TRUE ## 4 NA -1.1468342 b 1.31522864 FALSE ## 5 NA 0.2642254 c 0.06981507 FALSE 1.5 Keeping some rows For keeping the rows that meet certain conditions, we use filter(). Example: f_df &lt;- filter(a_df, abs(y) &gt; 0.5 &amp; !is.na(z)) (f_df) ## x y z ## 1 2 -2.515917 a ## 2 NA -1.146834 b 1.6 Arrange rows Some rows of the data frame will be put at the top and other rows will be put at the bottom; for this purpose, we use arrange(). Example: g_df &lt;- arrange(a_df, desc(z)) (g_df) ## x y z ## 1 NA 0.2642254 c ## 2 NA -1.1468342 b ## 3 2 -2.5159169 a ## 4 1 1.3381123 &lt;NA&gt; ## 5 3 1.2380736 &lt;NA&gt; h_df &lt;- arrange(a_df, desc(z), y) (h_df) ## x y z ## 1 NA 0.2642254 c ## 2 NA -1.1468342 b ## 3 2 -2.5159169 a ## 4 3 1.2380736 &lt;NA&gt; ## 5 1 1.3381123 &lt;NA&gt; 1.7 Changing variables’ names We use rename(). Example: i_df &lt;- rename(a_df, new_z = z) (i_df) ## x y new_z ## 1 1 1.3381123 &lt;NA&gt; ## 2 2 -2.5159169 a ## 3 3 1.2380736 &lt;NA&gt; ## 4 NA -1.1468342 b ## 5 NA 0.2642254 c 1.8 Re-arranging variables’ positions For outputting purpose, we may want to re-arrange variables’ positions, and we can use select_at() or setcolorder Example: new_var_oder &lt;- c(&quot;z&quot;, &quot;y&quot;, &quot;x&quot;) j_df &lt;- select_at(a_df, .var = new_var_oder) (j_df) ## z y x ## 1 &lt;NA&gt; 1.3381123 1 ## 2 a -2.5159169 2 ## 3 &lt;NA&gt; 1.2380736 3 ## 4 b -1.1468342 NA ## 5 c 0.2642254 NA "],
["dt.html", "2 Data.table way 2.1 data.table 2.2 Creating a data.table 2.3 Selecting columns 2.4 Creating new column 2.5 Keeping some rows 2.6 Arrange rows 2.7 Changing variables’ names 2.8 Re-arranging variables’ positions", " 2 Data.table way The first line of R codes in this chapter should be library(data.table) What can be done with dplyr package (one component of tidyverse package; dplyr stands for “data frame apply r”) can also be done using ‘data.table’ package, and vice versa. Lots of people like data.talbe package for many reasons, in particular fast speed of data.table codes. To me, if I need to deal with data set of one million or more rows, then I will switch from using dplyr to data.table package. 2.1 data.table What is a data.table? The answer is: It is an enhanced version of data frame. The meaning of “enhanced” is that it allows DT[i, j, by] that is, “take DT, subset/reorder rows using i, then calculate j, grouped by by” (see this and detailed explanations from https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html) 2.2 Creating a data.table We use data.table() to create a data.table. For converting from a data frame to a data.table, we use SetDT (especially for large data set) or as.data.table. Example: library(data.table) a_dt &lt;- data.table(ID = letters[1:5], x = 1:5, y = month.name[1:5]) (a_dt) ## ID x y ## 1: a 1 January ## 2: b 2 February ## 3: c 3 March ## 4: d 4 April ## 5: e 5 May 2.3 Selecting columns The syntax is: DT[, .(&lt;sel_var1 =&gt; var1, &lt;sel_var2 =&gt; var2)] where &lt;...&gt; means optional; or DT[, c(&quot;var1&quot;, &quot;var2&quot;)] or sel_cols &lt;- c(&quot;var1&quot;, &quot;var2&quot;) DT[, sel_cols, with = FALSE] Example: b_dt &lt;- a_dt[, .(new_y = y, new_x = x)] (b_dt) ## new_y new_x ## 1: January 1 ## 2: February 2 ## 3: March 3 ## 4: April 4 ## 5: May 5 vars_to_choose &lt;- c(&quot;ID&quot;, &quot;y&quot;) c_dt &lt;- a_dt[, vars_to_choose, with = FALSE] (c_dt) ## ID y ## 1: a January ## 2: b February ## 3: c March ## 4: d April ## 5: e May 2.4 Creating new column The syntax is new_DT -&gt; copy(DT) new_DT[, `:=`(new_var = func(existed_vars))] If we care about memory and are aware of all possible side effects on the original DT, we can do DT[, `:=`(new_var = func(existed_vars))] About “side effects” of :=, see https://cran.r-project.org/web/packages/data.table/vignettes/datatable-reference-semantics.html Example: (the_name &lt;- names(a_dt)) ## [1] &quot;ID&quot; &quot;x&quot; &quot;y&quot; new_dt &lt;- copy(a_dt) new_dt[, `:=`(u = x^2)] (new_dt) ## ID x y u ## 1: a 1 January 1 ## 2: b 2 February 4 ## 3: c 3 March 9 ## 4: d 4 April 16 ## 5: e 5 May 25 a_dt[, `:=`(u = x^2)] (a_dt) ## ID x y u ## 1: a 1 January 1 ## 2: b 2 February 4 ## 3: c 3 March 9 ## 4: d 4 April 16 ## 5: e 5 May 25 (the_name) # it&#39;s also updated! ## [1] &quot;ID&quot; &quot;x&quot; &quot;y&quot; &quot;u&quot; 2.5 Keeping some rows The syntax is new_DT &lt;- DT[var1 == sth &amp; var2 &gt; sth | vars != sth] Example: dt_new &lt;- a_dt[x%%2 == 0 | u == 9] (dt_new) ## ID x y u ## 1: b 2 February 4 ## 2: c 3 March 9 ## 3: d 4 April 16 2.6 Arrange rows The syntax is DT[order(var1, -var2)] Example: d_dt &lt;- a_dt[order(-ID)] (d_dt) ## ID x y u ## 1: e 5 May 25 ## 2: d 4 April 16 ## 3: c 3 March 9 ## 4: b 2 February 4 ## 5: a 1 January 1 2.7 Changing variables’ names The syntax is setnames(DT, &quot;old_name&quot;, &quot;new_name&quot;) Example: setnames(a_dt, c(&quot;x&quot;, &quot;y&quot;), c(&quot;new_x&quot;, &quot;new_y&quot;)) (a_dt) ## ID new_x new_y u ## 1: a 1 January 1 ## 2: b 2 February 4 ## 3: c 3 March 9 ## 4: d 4 April 16 ## 5: e 5 May 25 2.8 Re-arranging variables’ positions The syntax is setcolorder(DT, neworder = new_order) Example: setcolorder(a_dt, neworder = c(&quot;ID&quot;, &quot;u&quot;, &quot;new_y&quot;, &quot;new_x&quot;)) (a_dt) ## ID u new_y new_x ## 1: a 1 January 1 ## 2: b 4 February 2 ## 3: c 9 March 3 ## 4: d 16 April 4 ## 5: e 25 May 5 "],
["base-r.html", "3 Base R", " 3 Base R "],
["ggplot-gridexta-patchwork.html", "4 ggplot + gridExta + patchwork", " 4 ggplot + gridExta + patchwork "],
["writing-functions.html", "5 Writing functions", " 5 Writing functions "],
["for-loops.html", "6 for loops", " 6 for loops "],
["purrr-package.html", "7 purrr package", " 7 purrr package "],
["apply-family-functions.html", "8 apply family functions", " 8 apply family functions "],
["multiple-core-apply.html", "9 multiple core apply", " 9 multiple core apply "],
["stringr-package.html", "10 stringr package", " 10 stringr package "],
["lubridate-package.html", "11 lubridate package", " 11 lubridate package "],
["gt-package.html", "12 gt package", " 12 gt package "],
["leaflet-package.html", "13 leaflet package", " 13 leaflet package "],
["shiny-package.html", "14 shiny package", " 14 shiny package "],
["knitr-package.html", "15 knitr package", " 15 knitr package "]
]
