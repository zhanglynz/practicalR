[
["index.html", "Practical R: a concise manual Preface", " Practical R: a concise manual Lingyun Zhang 2021-04-24 Preface To be written. "],
["ti.html", "1 Tidyverse 1.1 tibble 1.2 Creating a data frame", " 1 Tidyverse In this chapter (Chapter 1) and the next one, we deal with data frames, and we learn how to create a data frame; how to select from the data frame the columns that we want; how to create a new column based on existed columns in the data frame; how to keep the rows that meet our set conditions; how to change variables’ names; how to arrange the data frame based on some variables; how to have summary of the data frame; how to convert a long table to a wide table; how to convert a wide table to a long table; how to re-arrange positions of variables in the data frame. The difference between Chapter 1 and Chapter 2 is that for the same task we use different tools (to be exact functions)—in this chapter we use functions that come from tidyverse package, whereas in the next chapter we use functions that mainly belong to data.table package. 1.1 tibble What is a tibble? The short answer is: a tibble is a data frame—probably this is enough, but you may also want to know that—it’s an enhanced data frame in a sense that it forces some rules (e.g. type rule) to be more strictly obeyed (the effects are: on one hand side, you lose some freedom associated with a data frame, on the other hand side, it prevents you from making some subtle mistakes while dealing with a data frame.) Tidyverse community encourages people to use tibbles. A tibble may not be working with some (old) packages, in that case, just use as.data.frame() to do converting. 1.2 Creating a data frame We can use data.frame() to create a data frame; one important thing is that we should almost always set stringsAsFactors = FALSE. To create a tibble, we use tidyverse::tibble() Example 1: a_df &lt;- data.frame(x = c(1L:3L, NA, NA), y = rnorm(5), z = c(NA, &#39;a&#39;, NA, &#39;b&#39;, &#39;c&#39;), stringsAsFactors = FALSE) (a_df) ## x y z ## 1 1 0.3834964 &lt;NA&gt; ## 2 2 1.8981069 a ## 3 3 0.5972493 &lt;NA&gt; ## 4 NA 1.6795288 b ## 5 NA 0.6449096 c Example 2: library(tidyverse) a_tibble &lt;- tibble(x = c(1L:3L, NA, NA), y = rnorm(5), z = c(NA, &#39;a&#39;, NA, &#39;b&#39;, &#39;c&#39;)) (a_tibble) ## # A tibble: 5 x 3 ## x y z ## &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 -0.692 &lt;NA&gt; ## 2 2 1.00 a ## 3 3 0.110 &lt;NA&gt; ## 4 NA 0.277 b ## 5 NA 1.09 c Example 3: tibble is more “strict” You can run the following code if you want but it silently changes the type of variable x from integer to character. a_df[is.na(a_df)] &lt;- &quot;&quot; If you run the following code you get an error message a_tibble[is.na(a_tibble)] &lt;- &quot;&quot; Erro message "],
["dt.html", "2 Data.table", " 2 Data.table "],
["base-r.html", "3 Base R", " 3 Base R "],
["ggplot-gridexta-patchwork.html", "4 ggplot + gridExta + patchwork", " 4 ggplot + gridExta + patchwork "],
["writing-functions.html", "5 Writing functions", " 5 Writing functions "],
["for-loops.html", "6 for loops", " 6 for loops "],
["purrr-package.html", "7 purrr package", " 7 purrr package "],
["apply-family-functions.html", "8 apply family functions", " 8 apply family functions "],
["multiple-core-apply.html", "9 multiple core apply", " 9 multiple core apply "],
["stringr-package.html", "10 stringr package", " 10 stringr package "],
["lubridate-package.html", "11 lubridate package", " 11 lubridate package "],
["gt-package.html", "12 gt package", " 12 gt package "],
["leaflet-package.html", "13 leaflet package", " 13 leaflet package "],
["shiny-package.html", "14 shiny package", " 14 shiny package "],
["knitr-package.html", "15 knitr package", " 15 knitr package "]
]
